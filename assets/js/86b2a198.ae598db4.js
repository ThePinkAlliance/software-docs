"use strict";(self.webpackChunktooling_docs=self.webpackChunktooling_docs||[]).push([[350],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return b}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),b=o,m=d["".concat(l,".").concat(b)]||d[b]||p[b]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},13737:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return b},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(83117),o=n(80102),i=(n(67294),n(3905)),a=["components"],s={sidebar_position:1,title:"Programming Style"},l=void 0,c={unversionedId:"code-guidelines/styling",id:"code-guidelines/styling",title:"Programming Style",description:"This page is a work in progress and is subject to change.",source:"@site/docs/code-guidelines/styling.md",sourceDirName:"code-guidelines",slug:"/code-guidelines/styling",permalink:"/software-docs/docs/code-guidelines/styling",draft:!1,editUrl:"https://github.com/thePinkAlliance/software-docs/tree/main/docs/code-guidelines/styling.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Programming Style"},sidebar:"tutorialSidebar",previous:{title:"Software Intro",permalink:"/software-docs/docs/intro"},next:{title:"Project Structure",permalink:"/software-docs/docs/code-guidelines/structure"}},u={},p=[{value:"Methods",id:"methods",level:3},{value:"Public variables",id:"public-variables",level:3},{value:"Static variables",id:"static-variables",level:3}],d={toc:p};function b(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"NOTE",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This page is a work in progress and is subject to change.")),(0,i.kt)("admonition",{title:"NOTE",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If you don't adhere to this style guide your code won't build.")),(0,i.kt)("h3",{id:"methods"},"Methods"),(0,i.kt)("p",null,"Methods should be using camel case formatting, meaning the first letter of the name is lowercase then for the next word the first letter is captial."),(0,i.kt)("admonition",{title:"note",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Methods ",(0,i.kt)("strong",{parentName:"p"},"should not be static")," because of ",(0,i.kt)("strong",{parentName:"p"},"potential issues")," with the ",(0,i.kt)("strong",{parentName:"p"},"WPILib scheduler"),", Only do this if its absolutely  necessary.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="frc/robot/RobotContainer.java"',title:'"frc/robot/RobotContainer.java"'},"public class RobotContainer {\n   public void startRobot() {}\n}\n")),(0,i.kt)("h3",{id:"public-variables"},"Public variables"),(0,i.kt)("p",null,"For the most part we don't want to have public variables we want to keep them internal (private) to that specific class if they need to be accessed then making a getter method that returns that value is the best option."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="frc/robot/subsystems/Base.java"',title:'"frc/robot/subsystems/Base.java"'},"public class Base extends SubsystemBase {\n   private double currentSpeed = 0;\n\n   public void drive() {\n      this.currentSpeed = 100;\n   }\n\n   // This is a getter method it returns a double\n   public double getCurrentSpeed() {\n      return currentSpeed;\n   }\n}\n")),(0,i.kt)("h3",{id:"static-variables"},"Static variables"),(0,i.kt)("p",null,"Static variables should be final and using all uppercase letters with underscores in between words."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="frc/robot/RobotContainer.java"',title:'"frc/robot/RobotContainer.java"'},"public class RobotContainer {\n   public static final double MAX_POWER = 0.6;\n}\n")))}b.isMDXComponent=!0}}]);